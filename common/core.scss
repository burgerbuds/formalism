// ================================
// Core Variables - Customizable
// Common variables throughout all theme types
// Additional variables are available in the theme files
// ================================

// Base size
$f-base-size: inherit !default;

// Highlights
$f-highlight-color: #a42cf9 !default;
$f-highlight-color: #6d00f0;

// States
$f-error-color: #e91e63 !default;
$f-success-color: #cddc39 !default;
$f-disabled-color: #767676 !default;

// Field
$f-bg-color: white !default;

// Text
$f-text-font-size: 1em !default;
$f-text-color: inherit !default;
$f-text-color-disabled: $f-disabled-color !default;
$f-text-caret-color: $f-highlight-color !default;

// Labels
$f-label-color: #6f7171 !default;
$f-label-color-hover: $f-highlight-color !default;
$f-label-color-focus: $f-highlight-color !default;
$f-label-color-filled: $f-text-color !default;
$f-label-color-error: $f-error-color !default; // TODO: Roll this out
$f-label-color-disabled: $f-disabled-color !default;

// Field > Border
$f-border-color: #a4a8a8 !default;
$f-border-color-hover: $f-highlight-color !default;
$f-border-color-focus: $f-border-color-hover !default;
$f-border-color-active: $f-highlight-color !default;
$f-border-color-filled: $f-highlight-color !default; // TODO: Roll this out
$f-border-color-error: $f-error-color !default;
$f-border-color-success: $f-success-color !default;
$f-border-color-disabled: #dae0e4 !default;
$f-border-width: 1px !default; // px only
$f-border-width-focus: 2px !default;
$f-border-width-error: 2px !default;
$f-border-width-success: 2px !default;

// Messages
$f-message-color: #666 !default;
$f-message-font-size: 0.9em !default;

// Indicator
$f-indicator-required-color: $f-border-color !default;
$f-indicator-required-size: 1em !default;
$f-indicator-optional-color: $f-border-color !default;
$f-indicator-optional-size: 0.65em !default;

// Transitions
$f-transition-duration: 0.2s !default;
$f-transition-timing: cubic-bezier(0.51, 0.92, 0.24, 1) !default;

// Selectors
$f-modifier-filled: '.is-filled' !default;
$f-modifier-error: '.has-error' !default;

// Selections
$f-selection-color: white !default;
$f-selection-bg: $f-highlight-color !default;

// Settings
$f-hide-instructions-when-error: true !default;

// ================================
// Form Helpers
// Mixins to help you target and style formalism elements
// ================================

// Element root
@mixin f-base($block: null, $theme: null, $hasError: null) {
    $block-suffix: block-suffix($hasError);
    #{$block}#{if($block and $theme, '--#{$theme}', '')}#{$block-suffix} {
        @content;
    }
}

// Inner wrapping element
@mixin f-inner($block: null, $theme: null, $hasError: null) {
    $block-suffix: block-suffix($hasError);
    #{$block}#{if($block and $theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__inner {
        @content;
    }
}

// Form field (has state)
@mixin f-field($block: null, $theme: null, $hasError: null, $state: null) {
    $block-suffix: block-suffix($hasError);
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__field#{$state} {
        @content;
    }
}

// Field label (not the label element)
@mixin f-label($block: null, $theme: null, $state: null, $hasError: null) {
    $block-suffix: block-suffix($hasError);
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__field#{$state}
        ~ #{$block}__label {
        @content;
    }
}

// Field label text
@mixin f-label-text($block: null, $theme: null, $state: null, $hasError: null) {
    $block-suffix: block-suffix($hasError);
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__field#{$state}
        ~ #{$block}__label
        #{$block}__label-text {
        @content;
    }
}

// Required or optional indicator
// Use when the indicator is outside the label
@mixin f-indicator($block: null, $theme: null, $state: null, $hasError: null) {
    $block-suffix: block-suffix($hasError);
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__field#{$state}
        ~ #{$block}__indicator {
        @content;
    }
}

// Required or optional indicator
// Use when the indicator is inside the label
@mixin f-label-indicator($block: null, $theme: null, $state: null, $hasError: null) {
    $block-suffix: block-suffix($hasError);
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__field#{$state}
        ~ #{$block}__label
        #{$block}__indicator {
        @content;
    }
}

// Required or optional indicator
// Use when indicator is within the legend
// - Used within Fieldset base
@mixin f-legend-indicator($block: null, $theme: null, $hasError: null) {
    $block-suffix: block-suffix($hasError);
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix} #{$block}__label #{$block}__indicator {
        @content;
    }
}

// Message instructions or error
@mixin f-message($block: null, $theme: null, $hasError: null) {
    $block-suffix: block-suffix($hasError);
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__message {
        @content;
    }
}

// Fieldset legend
@mixin f-legend($block: null, $theme: null, $hasError: null) {
    $block-suffix: if(
        $hasError == true,
        $f-modifier-error,
        if($hasError == false, ':not(#{$f-modifier-error})', null)
    );
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__legend {
        @content;
    }
}

// Fieldset legend - inside label
@mixin f-legend-label($block: null, $theme: null, $hasError: null) {
    $block-suffix: if(
        $hasError == true,
        $f-modifier-error,
        if($hasError == false, ':not(#{$f-modifier-error})', null)
    );
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__legend
        #{$block}__label {
        @content;
    }
}

// Fieldset legend - inside label-text
@mixin f-legend-text($block: null, $theme: null, $hasError: null) {
    $block-suffix: if(
        $hasError == true,
        $f-modifier-error,
        if($hasError == false, ':not(#{$f-modifier-error})', null)
    );
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__legend
        #{$block}__label-text {
        @if ($theme == null) {
            color: $f-text-color;
            display: block;

            &:before {
                content: '';
                position: absolute;
                top: 0;
                bottom: 0;
                left: -0.35em;
                right: -0.35em;
                z-index: -1;
                background-color: $f-bg-color;
            }
        }
        @content;
    }
}

@mixin f-label-after(
    $block: null,
    $theme: null,
    $state: null,
    $hasError: null
) {
    $block-suffix: if(
        $hasError == true,
        $f-modifier-error,
        if($hasError == false, ':not(#{$f-modifier-error})', null)
    );
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__field#{$state}
        ~ #{$block}__label:after {
        @content;
    }
}

@mixin f-label-before(
    $block: null,
    $theme: null,
    $state: null,
    $hasError: null
) {
    $block-suffix: if(
        $hasError == true,
        $f-modifier-error,
        if($hasError == false, ':not(#{$f-modifier-error})', null)
    );
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__field#{$state}
        ~ #{$block}__label:before {
        @content;
    }
}

@mixin f-button($block: null, $theme: null, $state: null, $hasError: null) {
    $block-suffix: if(
        $hasError == true,
        $f-modifier-error,
        if($hasError == false, ':not(#{$f-modifier-error})', null)
    );
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__field#{$state}
        ~ #{$block}__button {
        @if ($theme == null and $state == null) {
            cursor: pointer;
        }
        @content;
    }
}

@mixin f-arrow($block: null, $theme: null, $state: null, $hasError: null) {
    $block-suffix: if(
        $hasError == true,
        $f-modifier-error,
        if($hasError == false, ':not(#{$f-modifier-error})', null)
    );
    #{$block}#{if($theme, '--#{$theme}', '')}#{$block-suffix}
        #{$block}__field#{$state}
        ~ #{$block}__arrow {
        @content;
    }
}

// Alias
@mixin f-inside($block: null, $theme: null, $state: null, $hasError: null) {
    @include f-label-after($block, $theme, $state, $hasError) {
        @content;
    }
}

// Alias
@mixin f-outside($block: null, $theme: null, $state: null, $hasError: null) {
    @include f-label-before($block, $theme, $state, $hasError) {
        @content;
    }
}

// Alias
@mixin f-switch($block: null, $theme: null, $state: null, $hasError: null) {
    @include f-label-after($block, $theme, $state, $hasError) {
        @content;
    }
}

// Alias
@mixin f-switchbox($block: null, $theme: null, $state: null, $hasError: null) {
    @include f-label-before($block, $theme, $state, $hasError) {
        @content;
    }
}


// ================================
// Helpers
// ================================

@function block-suffix($hasError: null, $modifier-error: $f-modifier-error) {
    @return if(
        $hasError == true,
        $f-modifier-error,
        if($hasError == false, ':not(#{$f-modifier-error})', null)
    );
}

// Usage: transition: transition(transform);
@function transition($property) {
    @return $property $f-transition-duration $f-transition-timing;
}

// Replace `$search` with `$replace` in `$string`
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(
                str-slice($string, $index + str-length($search)),
                $search,
                $replace
            );
    }
    @return $string;
}


// ================================
// Common Mixins
// Initial styles applied to formalism elements
// ================================

// Element root
@mixin f-common-base($block: null) {
    @include f-base($block) {
        position: relative;
        font-size: $f-base-size;
        text-align: left;

        // Disable mobile tap color
        & * {
            -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
        }

        @media screen and (prefers-reduced-motion) {
            html & *,
            html & *:before,
            html & *:after {
                transition: none !important;
                animation: none !important;
            }
        }
    }
}

// Inner wrapping element
@mixin f-common-inner($block: null) {
    @include f-inner($block) {
        display: block;
        position: relative;
    }
}

// Form field
@mixin f-common-field($block: null) {
    @include f-field($block) {
        color: $f-text-color;
        width: 100%;
        border: 0;
        caret-color: $f-text-caret-color;
        font-size: $f-text-font-size;
        font-family: inherit;
        display: block;
        outline: 0;

        // Field > Disabled
        &:disabled {
            color: $f-text-color-disabled;
            cursor: not-allowed;
        }

        &::selection {
            color: $f-selection-color !important;
            background: $f-selection-bg !important;
            text-shadow: none;
        }

        // Selection colors > Disabled
        &:disabled::selection {
            color: $f-selection-color !important;
            background: $f-disabled-color !important;
            text-shadow: none;
        }

        // Autofill color
        &:-webkit-autofill {
            -webkit-text-fill-color: $f-text-color !important;
        }
    }

    // Field > Error
    @include f-field($block, $hasError: true) {
        caret-color: $f-error-color;

        &::selection {
            color: $f-selection-color !important;
            background: $f-error-color !important;
            text-shadow: none;
        }
    }
}

// Field label (not the label element)
@mixin f-common-label($block: null) {
    @include f-label($block) {
        user-select: none;
        font-size: $f-text-font-size;
    }
    // Label > Not disabled
    @include f-label($block, $state: ':not(:disabled)') {
        cursor: pointer;
    }
    // Label > Disabled
    @include f-label($block, $state: ':disabled') {
        cursor: not-allowed;
    }
}

// Field label text
@mixin f-common-label-text(
    $block: null,
    $state: null,
    $theme: null,
    $hasError: null
) {
    @include f-label-text($block) {
        color: $f-label-color;
    }
}

// Required or optional indicator
// Use when the indicator is outside the label
@mixin f-common-indicator($block: null) {
    @include f-indicator($block) {
        pointer-events: none;
        user-select: none;

        &--optional {
            color: $f-indicator-optional-color;
            font-size: $f-indicator-optional-size;
        }

        &--required {
            color: $f-indicator-required-color;
            font-size: $f-indicator-required-size;
        }
    }
    // Indicator > Error
    @include f-indicator($block, $hasError: true) {
        color: $f-border-color-error;
    }
    // Indicator > Disabled
    @include f-indicator($block, $state: ':disabled') {
        color: $f-border-color-disabled;
    }
}

// Required or optional indicator
// Use when the indicator is inside the label
@mixin f-common-label-indicator($block: null) {
    @include f-label-indicator($block) {
        pointer-events: none;
        user-select: none;

        &--optional {
            color: $f-indicator-optional-color;
            font-size: $f-indicator-optional-size;
        }

        &--required {
            color: $f-indicator-required-color;
            font-size: $f-indicator-required-size;
        }
    }
    // Indicator > Error
    @include f-label-indicator($block, $hasError: true) {
        color: $f-border-color-error;
    }
    // Indicator > Disabled
    @include f-label-indicator($block, $state: ':disabled') {
        color: $f-border-color-disabled;
    }
}

// Required or optional indicator
// Use when indicator is within the legend
// - Used within Fieldset base
@mixin f-common-legend-indicator($block: null) {
    @include f-legend-indicator($block) {
        pointer-events: none;
        user-select: none;

        &--optional {
            color: $f-indicator-optional-color;
            font-size: $f-indicator-optional-size;
        }

        &--required {
            color: $f-indicator-required-color;
            font-size: $f-indicator-required-size;
        }
    }
    // Indicator > Error
    @include f-legend-indicator($block, $hasError: true) {
        color: $f-border-color-error;
    }
}

// Message instructions or error
@mixin f-common-message($block: null) {
    @include f-message($block) {
        font-size: $f-message-font-size;

        &--instruction {
            color: $f-message-color;
        }

        &--error {
            color: $f-error-color;
        }

        // Hide the instructions if there's an error
        @if ($f-hide-instructions-when-error) {
            &--error + #{$block}__message--instruction {
                display: none;
            }
        }
    }
    // Message > Error
    @include f-message($block, $hasError: true) {
        &--error::selection {
            color: $f-selection-color !important;
            background: $f-error-color !important;
            text-shadow: none;
        }
    }
}
