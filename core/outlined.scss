// ================================
// Outlined Variables
// Requires: common/core.scss
// ================================

// Variables > Labels
$fo-label-scale: 0.9 !default;

// Variables > Field padding
$fo-field-padding-vertical: 1.1em !default;
$fo-field-padding-horizontal: 0.9em !default;

// Variables > Field padding fine tuning
$fo-field-padding-top: $fo-field-padding-vertical * 1.1 !default;
$fo-field-padding-bottom: $fo-field-padding-vertical !default;
$fo-field-padding-left: $fo-field-padding-horizontal !default;
$fo-field-padding-right: $fo-field-padding-horizontal !default;

// Variables > Border
$fo-border-radius: 0.25em !default;

// Variables > Indicator
$fo-indicator-required-top: 0.2em !default;
$fo-indicator-required-right: 0.4em !default;
$fo-indicator-optional-top: 0.5em !default;
$fo-indicator-optional-right: 0.5em !default;
$fo-indicator-optional-letter-spacing: 0.02em !default;

// Variables > Messages
$fo-message-margin: 0.5em 0 0 0 !default;
$fo-message-margin-inset: 0.5em 0 0 0.5em !default;

// ================================
// Outlined mixins
// ================================

@mixin f-field-focus-styles {
    border-color: $f-border-color-focus;
    @if ($f-border-width-focus > $f-border-width) {
        box-shadow: inset
            0
            0
            0
            calc(#{$f-border-width-focus} - #{$f-border-width})
            $f-border-color-focus;
    }
}

@mixin f-field-active-styles {
    border-color: $f-border-color-active;
    @if ($f-border-width-focus > $f-border-width) {
        box-shadow: inset
            0
            0
            0
            calc(#{$f-border-width-focus} - #{$f-border-width})
            $f-border-color-active;
    }
}

@mixin fo-common-field($field) {
    @include f-field($field, $theme: 'outlined') {
        color: $f-text-color;
        background-color: $f-bg-color;
        border: $f-border-width solid $f-border-color;
        border-radius: $fo-border-radius;
        transition: transition(border-color), transition(box-shadow);
        will-change: border-color, box-shadow;
        padding: $fo-field-padding-top $fo-field-padding-right
            $fo-field-padding-bottom $fo-field-padding-left;
        box-shadow: inset 0 0 0 0 $f-bg-color;

        @if (
            $f-remove-autofill and index($f-autofill-elements, $field) != null
        ) {
            // Ms Edge autofill class
            &.edge-autofilled {
                color: $f-text-color !important;
                background-color: $f-bg-color !important;
            }
            // Autofill > Default + Hover
            &:-webkit-autofill,
            &:-webkit-autofill:hover {
                -webkit-box-shadow: 0 0 0 10em $f-bg-color inset !important;
                // Avoid transitioning when Autofilled
                transition: box-shadow 0s;
            }

            // Autofill > Focus
            &:-webkit-autofill:focus,
            &:-webkit-autofill:focus:hover {
                @if ($f-border-width-focus > $f-border-width) {
                    -webkit-box-shadow: inset
                            0
                            0
                            0
                            calc(#{$f-border-width-focus} - #{$f-border-width})
                            $f-border-color-focus,
                        inset 0 0 0 10em $f-bg-color !important;
                } @else {
                    -webkit-box-shadow: inset 0 0 0 10em $f-bg-color !important;
                }
            }

            // Autofill > Active
            &:-webkit-autofill:active,
            &:-webkit-autofill:active:hover {
                @if ($f-border-width-focus > $f-border-width) {
                    -webkit-box-shadow: inset
                            0
                            0
                            0
                            calc(#{$f-border-width-focus} - #{$f-border-width})
                            $f-border-color-active,
                        inset 0 0 0 10em $f-bg-color !important;
                } @else {
                    -webkit-box-shadow: inset 0 0 0 10em $f-bg-color !important;
                }
            }
        }
    }

    // Field > Hover + Not disabled
    @include f-field(
        $field,
        $theme: 'outlined',
        $state: ':hover:not(:disabled)'
    ) {
        border-color: $f-border-color-hover;
        @if ($f-border-width-hover > $f-border-width) {
            box-shadow: inset
                0
                0
                0
                calc(#{$f-border-width-hover} - #{$f-border-width})
                $f-border-color-hover;
        }
    }

    // Field > Disabled
    @include f-field($field, $theme: 'outlined', $state: ':disabled') {
        border-color: $f-border-color-disabled;
        color: $f-disabled-color;
    }

    // Field > Focus + Not error
    @include f-field(
        $field,
        $theme: 'outlined',
        $state: ':focus',
        $has-error: false
    ) {
        @include f-field-focus-styles;
    }

    // Field > Focus + Hover + Not disabled + Not error
    @include f-field(
        $field,
        $theme: 'outlined',
        $state: ':focus:hover:not(:disabled)',
        $has-error: false
    ) {
        @include f-field-focus-styles;
    }

    // Field > Active + Not error
    @include f-field(
        $field,
        $theme: 'outlined',
        $state: ':active:not(:disabled)',
        $has-error: false
    ) {
        @include f-field-active-styles;
    }

    // Field > Active + Hover + Not disabled + Not error
    @include f-field(
        $field,
        $theme: 'outlined',
        $state: ':active:hover:not(:disabled)',
        $has-error: false
    ) {
        @include f-field-active-styles;
    }

    // Field > Filled + Not disabled/focus/hover/active + Not error
    @include f-field(
        $field,
        $theme: 'outlined',
        $state: ':not(:disabled):not(:focus):not(:hover):not(:active)',
        $has-error: false,
        $is-filled: true
    ) {
        border-color: $f-border-color-filled;
        @if ($f-border-width-filled > $f-border-width) {
            box-shadow: inset
                0
                0
                0
                calc(#{$f-border-width-filled} - #{$f-border-width})
                $f-border-color-filled;
        }
    }

    // Field > Error
    @include f-field($field, $theme: 'outlined', $has-error: true) {
        &,
        &:hover {
            border-color: $f-border-color-error;
            @if ($f-border-width-error > $f-border-width) {
                box-shadow: inset
                    0
                    0
                    0
                    calc(#{$f-border-width-error} - #{$f-border-width})
                    $f-border-color-error;
            }

            @if (index($f-autofill-elements, $field)) {
                // Avoid transitioning when Autofilled
                transition: box-shadow 0s;

                // Autofill > Focus + Active
                &:-webkit-autofill:focus,
                &:-webkit-autofill:active {
                    @if ($f-border-width-focus > $f-border-width) {
                        -webkit-box-shadow: inset
                                0
                                0
                                0
                                calc(
                                    #{$f-border-width-focus} -
                                        #{$f-border-width}
                                )
                                $f-border-color-error,
                            inset 0 0 0 10em $f-bg-color !important;
                    } @else {
                        -webkit-box-shadow: inset
                            0
                            0
                            0
                            10em
                            $f-bg-color !important;
                    }
                }
            }
        }
    }

    // Field > Filled + Error
    @include f-field(
        $field,
        $theme: 'outlined',
        $has-error: true,
        $is-filled: true
    ) {
        border-color: $f-border-color-error;
        @if ($f-border-width-error > $f-border-width) {
            box-shadow: inset
                0
                0
                0
                calc(#{$f-border-width-error} - #{$f-border-width})
                $f-border-color-error;
        }

        @if (index($f-autofill-elements, $field)) {
            // Autofill > Focus + Active
            &:-webkit-autofill:focus,
            &:-webkit-autofill:active {
                @if ($f-border-width-focus > $f-border-width) {
                    -webkit-box-shadow: inset
                            0
                            0
                            0
                            calc(#{$f-border-width-focus} - #{$f-border-width})
                            $f-border-color-error,
                        inset 0 0 0 10em $f-bg-color !important;
                } @else {
                    -webkit-box-shadow: inset 0 0 0 10em $f-bg-color !important;
                }
            }
        }
    }
}

@mixin fo-common-label($field) {
    @include f-label($field, $theme: 'outlined') {
        position: absolute;
        display: flex;
        align-items: center;
        pointer-events: none;
        padding-top: $fo-field-padding-top;
        padding-bottom: $fo-field-padding-bottom;
        z-index: 1; // Place above field icons
        transition: transition(transform);
        will-change: transform;
        transform-origin: top left;
    }

    // Label > Error
    @include f-label($field, $theme: 'outlined', $has-error: true) {
        transform: translateY(-$fo-field-padding-top);
    }

    // Label > Focus
    @include f-label($field, $theme: 'outlined', $state: ':focus') {
        transform: translateY(-$fo-field-padding-top);
    }

    // Label > Filled
    @include f-label($field, $theme: 'outlined', $is-filled: true) {
        transform: translateY(-$fo-field-padding-top);
    }
}

@mixin fo-common-label-text($field) {
    @include f-label-text($field, $theme: 'outlined') {
        display: block;
        position: relative;
        transform-origin: center left;

        // Label background line mask
        &:before {
            content: '';
            position: absolute;
            top: 0;
            bottom: 0;
            left: -0.35em;
            right: -0.35em;
            z-index: -1;
            background-color: $f-bg-color;
            will-change: transform;
        }
    }

    // Label text > Filled + Not error/hover/focus/disabled
    @include f-label-text(
        $field,
        $theme: 'outlined',
        $state: ':not(:hover):not(:focus):not(:disabled)',
        $has-error: false,
        $is-filled: true
    ) {
        color: $f-label-color-filled;
    }

    // Label text > Hover + Not disabled + not error
    @include f-label-text(
        $field,
        $theme: 'outlined',
        $state: ':hover:not(:disabled)',
        $has-error: false
    ) {
        color: $f-label-color-hover;
    }

    // Label text > Focus + Not disabled + not error
    @include f-label-text(
        $field,
        $theme: 'outlined',
        $state: ':focus:not(:disabled)',
        $has-error: false
    ) {
        color: $f-label-color-focus;
    }

    // Label text > Error
    @include f-label-text($field, $theme: 'outlined', $has-error: true) {
        color: $f-label-color-error;
        transform: translateY(-50%) translateY(floor(-$f-border-width/2))
            scale($fo-label-scale);
    }

    // Label text > Focus
    @include f-label-text(
        $field: $field,
        $theme: 'outlined',
        $state: ':focus'
    ) {
        transform: translateY(-50%) translateY(floor(-$f-border-width/2))
            scale($fo-label-scale);
    }

    // Label text > Filled
    @include f-label-text(
        $field: $field,
        $theme: 'outlined',
        $is-filled: true
    ) {
        transform: translateY(-50%) translateY(floor(-$f-border-width/2))
            scale($fo-label-scale);
    }

    // Label text > Disabled
    @include f-label-text(
        $field: $field,
        $theme: 'outlined',
        $state: ':disabled'
    ) {
        color: $f-label-color-disabled;
    }
}

@mixin fo-common-indicator($field) {
    @include f-indicator($field, $theme: 'outlined') {
        position: absolute;
        transition: transition(color);
        will-change: color;

        &--optional {
            top: $fo-indicator-optional-top;
            right: $fo-indicator-optional-right;
            letter-spacing: $fo-indicator-optional-letter-spacing;
        }

        &--required {
            top: $fo-indicator-required-top;
            right: $fo-indicator-required-right;
        }
    }

    // Indicator > Hover (not disabled/error)
    @include f-indicator(
        $field,
        $theme: 'outlined',
        $state: ':hover:not(:disabled)',
        $has-error: false
    ) {
        color: $f-border-color-hover;
    }

    // Indicator > Focus (not disabled/error)
    @include f-indicator(
        $field: $field,
        $theme: 'outlined',
        $state: ':focus:not(:disabled)',
        $has-error: false
    ) {
        color: $f-border-color-focus;
    }

    // Indicator > Active (not disabled/error)
    @include f-indicator(
        $field: $field,
        $theme: 'outlined',
        $state: ':active:not(:disabled)',
        $has-error: false
    ) {
        color: $f-border-color-active;
    }

    // Indicator > Filled (not disabled/hover/focus/error)
    @include f-indicator(
        $field,
        $theme: 'outlined',
        $state: ':not(:disabled):not(:hover):not(:focus)',
        $has-error: false,
        $is-filled: true
    ) {
        color: $f-border-color-filled;
    }
}
