// ================================
// Outlined Variables
// Requires: common/core.scss
// ================================

// Variables > Labels
$fo-label-scale: 0.9 !default;

// Variables > Field padding
$fo-field-padding-vertical: 1.1em !default;
$fo-field-padding-horizontal: 0.9em !default;

// Variables > Field padding fine tuning
$fo-field-padding-top: $fo-field-padding-vertical * 1.1 !default;
$fo-field-padding-bottom: $fo-field-padding-vertical !default;
$fo-field-padding-left: $fo-field-padding-horizontal !default;
$fo-field-padding-right: $fo-field-padding-horizontal !default;

// Variables > Border
$fo-border-radius: 0.25em !default;

// Variables > Indicator
$fo-indicator-required-top: 0.2em !default;
$fo-indicator-required-right: 0.4em !default;
$fo-indicator-optional-top: 0.5em !default;
$fo-indicator-optional-right: 0.5em !default;
$fo-indicator-optional-letter-spacing: 0.02em !default;

// Variables > Messages
$fo-message-margin: 0.5em 0 0 0 !default;
$fo-message-margin-inset: 0.5em 0 0 0.5em !default;


// ================================
// Outlined mixins
// ================================

@mixin fo-common-field($block) {
    @include f-field($block, $theme: 'outlined') {
        color: $f-text-color;
        background-color: $f-bg-color;
        border: $f-border-width solid $f-border-color;
        border-radius: $fo-border-radius;
        transition: transition(border-color), transition(box-shadow);
        will-change: border-color, box-shadow;
        padding: $fo-field-padding-top $fo-field-padding-right
            $fo-field-padding-bottom $fo-field-padding-left;
        box-shadow: inset 0 0 0
            calc(#{$f-border-width-focus} - #{$f-border-width}) $f-bg-color;

        &:hover:not(:disabled) {
            border-color: $f-border-color-hover;
        }

        &:focus {
            border-color: $f-border-color-focus;
            box-shadow: inset 0 0 0
                calc(#{$f-border-width-focus} - #{$f-border-width})
                $f-border-color-focus;
        }

        &:disabled {
            border-color: $f-border-color-disabled;
            color: $f-disabled-color;
        }

        // Autofill > Default / Hover
        &:-webkit-autofill,
        &:-webkit-autofill:hover {
            -webkit-box-shadow: 0 0 0 10em $f-bg-color inset !important;
        }

        // Autofill > Focus / Active
        &:-webkit-autofill:focus,
        &:-webkit-autofill:active {
            -webkit-box-shadow: inset 0 0 0
                    calc(#{$f-border-width-focus} - #{$f-border-width})
                    $f-border-color-focus,
                inset 0 0 0 10em $f-bg-color !important;
        }
    }

    // Field > Error
    @include f-field($block, $theme: 'outlined', $hasError: true) {
        &,
        &:hover {
            border-color: $f-border-color-error;
            box-shadow: inset 0 0 0
                calc(#{$f-border-width-error} - #{$f-border-width})
                $f-border-color-error;
            // Autofill > Focus / Active
            &:-webkit-autofill:focus,
            &:-webkit-autofill:active {
                -webkit-box-shadow: inset 0 0 0
                        calc(#{$f-border-width-focus} - #{$f-border-width})
                        $f-border-color-error,
                    inset 0 0 0 10em $f-bg-color !important;
            }
        }
    }

    // Field > Filled + Error
    @include f-field(
        $block,
        $theme: 'outlined',
        $state: $f-modifier-filled,
        $hasError: true
    ) {
        border-color: $f-border-color-error;
        box-shadow: inset 0 0 0
            calc(#{$f-border-width-error} - #{$f-border-width})
            $f-border-color-error;
        // Autofill > Focus / Active
        &:-webkit-autofill:focus,
        &:-webkit-autofill:active {
            -webkit-box-shadow: inset 0 0 0
                    calc(#{$f-border-width-focus} - #{$f-border-width})
                    $f-border-color-error,
                inset 0 0 0 10em $f-bg-color !important;
        }
    }
}

@mixin fo-common-label($block) {
    @include f-label($block, $theme: 'outlined') {
        position: absolute;
        display: flex;
        align-items: center;
        pointer-events: none;
        padding-top: $fo-field-padding-top;
        padding-bottom: $fo-field-padding-bottom;
        z-index: 1; // Place above field icons
        transition: transition(transform);
        will-change: transform;
        transform-origin: top left;
    }

    // Label > Error
    @include f-label($block, $theme: 'outlined', $hasError: true) {
        transform: translateY(-$fo-field-padding-top);
    }

    // Label > Focus
    @include f-label($block, $theme: 'outlined', $state: ':focus') {
        transform: translateY(-$fo-field-padding-top);
    }

    // Label > Filled
    @include f-label(
        $block,
        $theme: 'outlined',
        $state: $f-modifier-filled
    ) {
        transform: translateY(-$fo-field-padding-top);
    }
}

// Label text
@mixin fo-common-label-text($block) {
    @include f-label-text($block, $theme: 'outlined') {
        display: block;
        position: relative;

        // Label background line mask
        &:before {
            content: '';
            position: absolute;
            top: 0;
            bottom: 0;
            left: -0.35em;
            right: -0.35em;
            z-index: -1;
            background-color: $f-bg-color;
            will-change: transform;
        }
    }

    // Label text > Filled + Not error/hover/focus/disabled)
    @include f-label-text(
        $block,
        $theme: 'outlined',
        $state: '#{$f-modifier-filled}:not(:hover):not(:focus):not(:disabled)',
        $hasError: false
    ) {
        color: $f-label-color-filled;
    }

    // Label text > Hover + Not error/disabled)
    @include f-label-text(
        $block,
        $theme: 'outlined',
        $state: ':hover:not(:disabled)',
        $hasError: false
    ) {
        color: $f-label-color-hover;
    }

    // Label text > Focus + Not error/disabled)
    @include f-label-text(
        $block,
        $theme: 'outlined',
        $state: ':focus:not(:disabled)',
        $hasError: false
    ) {
        color: $f-label-color-focus;
    }

    // Label text > Error
    @include f-label-text($block, $theme: 'outlined', $hasError: true) {
        color: $f-label-color-error;
        transform: translateY(-50%) translateY(floor(-$f-border-width/2))
            scale($fo-label-scale);
    }

    // Label text > Focus
    @include f-label-text(
        $block: $block,
        $theme: 'outlined',
        $state: ':focus'
    ) {
        transform: translateY(-50%) translateY(floor(-$f-border-width/2))
            scale($fo-label-scale);
    }

    // Label text > Filled
    @include f-label-text(
        $block: $block,
        $theme: 'outlined',
        $state: $f-modifier-filled
    ) {
        transform: translateY(-50%) translateY(floor(-$f-border-width/2))
            scale($fo-label-scale);
    }

    // Label text > Disabled
    @include f-label-text(
        $block: $block,
        $theme: 'outlined',
        $state: ':disabled'
    ) {
        color: $f-label-color-disabled;
    }
}

@mixin fo-common-indicator($block) {
    @include f-indicator($block, $theme: 'outlined') {
        position: absolute;
        transition: transition(color);
        will-change: color;

        &--optional {
            top: $fo-indicator-optional-top;
            right: $fo-indicator-optional-right;
            letter-spacing: $fo-indicator-optional-letter-spacing;
        }

        &--required {
            top: $fo-indicator-required-top;
            right: $fo-indicator-required-right;
        }
    }

    // Indicator > Filled (not disabled/hover/focus/error)
    @include f-indicator(
        $block,
        $theme: 'outlined',
        $state: '#{$f-modifier-filled}:not(:disabled):not(:hover):not(:focus)',
        $hasError: false
    ) {
        color: $f-border-color;
    }

    // Indicator > Hover (not disabled/error)
    @include f-indicator(
        $block,
        $theme: 'outlined',
        $state: ':hover:not(:disabled)',
        $hasError: false
    ) {
        color: $f-border-color-hover;
    }

    // Indicator > Focus (not disabled/error)
    @include f-indicator(
        $block: $block,
        $theme: 'outlined',
        $state: ':focus:not(:disabled)',
        $hasError: false
    ) {
        color: $f-border-color-focus;
    }

    // Indicator > Active (not disabled/error)
    @include f-indicator(
        $block: $block,
        $theme: 'outlined',
        $state: ':active:not(:disabled)',
        $hasError: false
    ) {
        color: $f-border-color-active;
    }
}
